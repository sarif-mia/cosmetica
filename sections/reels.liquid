{% assign reels_id = 'template--20843993301227reelsrghxak' %}
{% assign js_id = reels_id | replace: '-', '_' %}

{{ 'reels.css' | asset_url | stylesheet_tag }}

{% endstyle %}

<section
  class="reels-section-{{ reels_id }}"
  data-auto-scroll="{{ section.settings.enable_auto_scroll }}"
  data-scroll-speed="{{ section.settings.auto_scroll_speed }}"
  is="reels-carousel-{{ js_id }}">
  <div class="reels-container-{{ reels_id }}">
    {% if section.settings.heading != blank or section.settings.subheading != blank %}
      <div class="reels-header-{{ reels_id }}">
        {% if section.settings.heading != blank %}
          <h2 class="reels-title-{{ reels_id }}">{{ section.settings.heading }}</h2>
        {% endif %}
        {% if section.settings.subheading != blank %}
          <p class="reels-subtitle-{{ reels_id }}">{{ section.settings.subheading }}</p>
        {% endif %}
      </div>
    {% endif %}

    <div class="reels-carousel-wrapper-{{ reels_id }}">
      <button class="reels-nav-{{ reels_id }} prev" aria-label="Previous">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15 18 9 12 15 6"></polyline>
        </svg>
      </button>

      <div class="reels-carousel-{{ reels_id }}">
        {% assign has_videos = false %}
        {% for i in (1..15) %}
          {% liquid
            assign video_key = 'video_' | append: i
            assign product_key = 'product_' | append: i
            assign video = section.settings[video_key]
            assign product = section.settings[product_key]
          %}

          {% if video != blank %}
            {% assign has_videos = true %}
            <div class="reels-item-{{ reels_id }}" data-reel-index="{{ i }}">
              <div class="reels-video-wrapper-{{ reels_id }}">
                <video
                    class="reels-video-{{ reels_id }}"
                    src="{{ video.sources[1].url | default: video.sources[0].url }}"
                    loop
                    muted
                    playsinline
                    preload="auto"
                  ></video>

                <div class="reels-play-overlay-{{ reels_id }}">
                  <div class="reels-play-icon-{{ reels_id }}">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                      <polygon points="5 3 19 12 5 21 5 3"></polygon>
                    </svg>
                  </div>
                </div>

                {% if product != blank %}
                  <a href="{{ product.url }}" class="reels-product-tag-{{ reels_id }}">
                    <div class="reels-product-image-{{ reels_id }}">
                      {% if product.featured_image %}
                        <img
                          src="{{ product.featured_image | image_url: width: 100 }}"
                          alt="{{ product.featured_image.alt | escape }}"
                          loading="lazy"
                          width="100"
                          height="100"
                        >
                      {% endif %}
                    </div>
                    <div class="reels-product-info-{{ reels_id }}">
                      <h3 class="reels-product-title-{{ reels_id }}">{{ product.title }}</h3>
                      <p class="reels-product-price-{{ reels_id }}">{{ product.price | money }}</p>
                    </div>
                  </a>
                {% endif %}
              </div>
            </div>
          {% endif %}
        {% endfor %}

        {% unless has_videos %}
          <div class="reels-item-{{ reels_id }}">
            <div class="reels-video-wrapper-{{ reels_id }}">
              <div class="reels-placeholder-{{ reels_id }}">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polygon points="23 7 16 12 23 17 23 7"></polygon>
                  <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                </svg>
                <div class="reels-empty-state-{{ reels_id }}">
                  Add videos to get started
                </div>
              </div>
            </div>
          </div>
        {% endunless %}
      </div>

      <button class="reels-nav-{{ reels_id }} next" aria-label="Next">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </button>
    </div>
  </div>

<script>
  (function() {
    class ReelsCarousel{{ js_id }} extends HTMLElement {
      constructor() {
        super();
        this.carousel = this.querySelector('.reels-carousel-{{ reels_id }}');
        this.prevBtn = this.querySelector('.reels-nav-{{ reels_id }}.prev');
        this.nextBtn = this.querySelector('.reels-nav-{{ reels_id }}.next');
        this.items = this.querySelectorAll('.reels-item-{{ reels_id }}');
        this.videos = this.querySelectorAll('.reels-video-{{ reels_id }}');
        this.currentPlayingVideo = null;
        this.autoScrollInterval = null;
        this.isAutoScrollEnabled = this.dataset.autoScroll === 'true';
        this.scrollSpeed = parseInt(this.dataset.scrollSpeed) || 3000;
        this.isVideoPlaying = false;
        this.observerOptions = {
          root: this.carousel,
          threshold: 0.5
        };
      }

      connectedCallback() {
        this.setupNavigation();
        this.setupAutoPlay();
        this.setupVideoControls();
        if (this.isAutoScrollEnabled) {
          this.startAutoScroll();
        }
      }

      disconnectedCallback() {
        this.stopAutoScroll();
      }

      setupNavigation() {
          if (!this.prevBtn || !this.nextBtn) return;

          this.prevBtn.addEventListener('click', () => {
            this.stopAutoScroll();
            const itemWidth = this.items[0].offsetWidth + {{ section.settings.gap }}px;
            this.carousel.scrollBy({ left: -itemWidth, behavior: 'smooth' });
            if (this.isAutoScrollEnabled && !this.isVideoPlaying) {
              setTimeout(() => this.startAutoScroll(), 5000);
            }
          });

          this.nextBtn.addEventListener('click', () => {
            this.stopAutoScroll();
            this.scrollNext();
            if (this.isAutoScrollEnabled && !this.isVideoPlaying) {
              setTimeout(() => this.startAutoScroll(), 5000);
            }
          });

          // Fix for carousel navigation: ensure scroll works even if items are not fully visible
          this.carousel.addEventListener('scroll', () => {
            if (this.carousel.scrollLeft === 0) {
              this.prevBtn.disabled = true;
            } else {
              this.prevBtn.disabled = false;
            }
            const maxScroll = this.carousel.scrollWidth - this.carousel.clientWidth;
            if (this.carousel.scrollLeft >= maxScroll - 10) {
              this.nextBtn.disabled = true;
            } else {
              this.nextBtn.disabled = false;
            }
          });

        this.carousel.addEventListener('mouseenter', () => {
          if (this.isAutoScrollEnabled) {
            this.stopAutoScroll();
          }
        });

        this.carousel.addEventListener('mouseleave', () => {
          if (this.isAutoScrollEnabled && !this.isVideoPlaying) {
            this.startAutoScroll();
          }
        });

        this.carousel.addEventListener('touchstart', () => {
          if (this.isAutoScrollEnabled) {
            this.stopAutoScroll();
          }
        });

        this.carousel.addEventListener('touchend', () => {
          if (this.isAutoScrollEnabled && !this.isVideoPlaying) {
            setTimeout(() => this.startAutoScroll(), 5000);
          }
        });
      }

      startAutoScroll() {
        if (this.isVideoPlaying) return;

        this.stopAutoScroll();
        this.autoScrollInterval = setInterval(() => {
          if (!this.isVideoPlaying) {
            this.scrollNext();
          }
        }, this.scrollSpeed);
      }

      stopAutoScroll() {
        if (this.autoScrollInterval) {
          clearInterval(this.autoScrollInterval);
          this.autoScrollInterval = null;
        }
      }

      scrollNext() {
        const itemWidth = this.items[0].offsetWidth + {{ section.settings.gap }};
        const maxScroll = this.carousel.scrollWidth - this.carousel.clientWidth;

        if (this.carousel.scrollLeft >= maxScroll - 10) {
          this.carousel.scrollTo({ left: 0, behavior: 'smooth' });
        } else {
          this.carousel.scrollBy({ left: itemWidth, behavior: 'smooth' });
        }
      }

      setupAutoPlay() {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            const video = entry.target.querySelector('.reels-video-{{ reels_id }}');
            const item = entry.target;

            if (entry.isIntersecting && entry.intersectionRatio >= 0.5) {
              if (this.currentPlayingVideo && this.currentPlayingVideo !== video) {
                this.pauseVideo(this.currentPlayingVideo);
              }
              this.playVideo(video, item);
              this.currentPlayingVideo = video;
            } else {
              this.pauseVideo(video);
              if (this.currentPlayingVideo === video) {
                this.currentPlayingVideo = null;
              }
            }
          });
        }, this.observerOptions);

        this.items.forEach((item) => {
          observer.observe(item);
        });
      }

      setupVideoControls() {
          this.items.forEach((item) => {
            const video = item.querySelector('.reels-video-{{ reels_id }}');
            if (!video) return;

            video.addEventListener('play', () => {
              this.isVideoPlaying = true;
              this.stopAutoScroll();
            });

            video.addEventListener('pause', () => {
              this.isVideoPlaying = false;
              if (this.isAutoScrollEnabled) {
                setTimeout(() => {
                  if (!this.isVideoPlaying) {
                    this.startAutoScroll();
                  }
                }, 1000);
              }
            });

            video.addEventListener('ended', () => {
              this.isVideoPlaying = false;
              if (this.isAutoScrollEnabled) {
                this.startAutoScroll();
              }
            });

            item.addEventListener('click', (e) => {
              if (e.target.closest('.reels-product-tag-{{ reels_id }}')) return;
              if (video.paused) {
                this.playVideo(video, item);
              } else {
                this.pauseVideo(video);
              }
            });

            // Ensure video plays when in view
            video.addEventListener('canplay', () => {
              if (item.classList.contains('playing')) {
                video.play();
              }
            });
          });
        }

      playVideo(video, item) {
        if (!video) return;
        video.muted = true;
        video.autoplay = true;
        video.play().catch(() => {});
        item.classList.add('playing');
      }

      pauseVideo(video) {
        if (!video) return;

        video.pause();
        const item = video.closest('.reels-item-{{ reels_id }}');
        if (item) {
          item.classList.remove('playing');
        }
      }
    }

    customElements.define('reels-carousel-{{ js_id }}', ReelsCarousel{{ js_id }});
  })();
</script>

{% schema %}
{
  "name": "Reels video carousel",
  "tag": "section",
  "settings": [
    {
      "type": "header",
      "content": "Section heading"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Shop Our Reels"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Subheading"
    },
    {
      "type": "select",
      "id": "heading_alignment",
      "label": "Heading alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 32
    },
    {
      "type": "range",
      "id": "subheading_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Subheading size",
      "default": 16
    },
    {
      "type": "header",
      "content": "Auto scroll"
    },
    {
      "type": "checkbox",
      "id": "enable_auto_scroll",
      "label": "Enable auto scroll",
      "default": false
    },
    {
      "type": "range",
      "id": "auto_scroll_speed",
      "min": 2000,
      "max": 8000,
      "step": 500,
      "unit": "ms",
      "label": "Auto scroll speed",
      "default": 3000
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "videos_desktop",
      "min": 2,
      "max": 6,
      "step": 1,
      "label": "Videos per row on desktop",
      "default": 4
    },
    {
      "type": "range",
      "id": "videos_tablet",
      "min": 2,
      "max": 4,
      "step": 1,
      "label": "Videos per row on tablet",
      "default": 3
    },
    {
      "type": "range",
      "id": "videos_mobile",
      "min": 1,
      "max": 3,
      "step": 1,
      "label": "Videos per row on mobile",
      "default": 2
    },
    {
      "type": "range",
      "id": "container_width",
      "min": 1000,
      "max": 1600,
      "step": 100,
      "unit": "px",
      "label": "Container width",
      "default": 1200
    },
    {
      "type": "range",
      "id": "gap",
      "min": 8,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Gap between videos",
      "default": 16
    },
    {
      "type": "range",
      "id": "video_border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Video border radius",
      "default": 12
    },
    {
      "type": "header",
      "content": "Video 1"
    },
    {
      "type": "video",
      "id": "video_1",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_1",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 2"
    },
    {
      "type": "video",
      "id": "video_2",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 3"
    },
    {
      "type": "video",
      "id": "video_3",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 4"
    },
    {
      "type": "video",
      "id": "video_4",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 5"
    },
    {
      "type": "video",
      "id": "video_5",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 6"
    },
    {
      "type": "video",
      "id": "video_6",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_6",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 7"
    },
    {
      "type": "video",
      "id": "video_7",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_7",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 8"
    },
    {
      "type": "video",
      "id": "video_8",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_8",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 9"
    },
    {
      "type": "video",
      "id": "video_9",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_9",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 10"
    },
    {
      "type": "video",
      "id": "video_10",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_10",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 11"
    },
    {
      "type": "video",
      "id": "video_11",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_11",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 12"
    },
    {
      "type": "video",
      "id": "video_12",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_12",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 13"
    },
    {
      "type": "video",
      "id": "video_13",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_13",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 14"
    },
    {
      "type": "video",
      "id": "video_14",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_14",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Video 15"
    },
    {
      "type": "video",
      "id": "video_15",
      "label": "Video"
    },
    {
      "type": "product",
      "id": "product_15",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading",
      "default": "#121212"
    },
    {
      "type": "color",
      "id": "subheading_color",
      "label": "Subheading",
      "default": "#666666"
    },
    {
      "type": "header",
      "content": "Spacing"
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding",
      "default": 40
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 40
    }
  ],
  "presets": [
    {
      "name": "Reels video carousel"
    }
  ]
}
{% endschema %}
</section>